const CACHE_NAME = 'tamil-learning-adventure-v2'; // Incremented version
// Paths are relative to the root of the 'dist' folder after build.
// Vite copies contents of 'public' to the root of 'dist'.
const ASSETS_TO_CACHE = [
  'index.html', // Will be at the root of dist
  'index.css',  // Will be at the root of dist (copied from public)
  'metadata.json', // Will be at the root of dist
  // Audio files will be at 'audio/...' in dist
  'audio/alphabets/a.mp3',
  'audio/alphabets/aa.mp3',
  'audio/alphabets/i.mp3',
  'audio/alphabets/ik.mp3',
  'audio/words/ammaa.mp3',
  'audio/words/sivappu.mp3',
  'audio/words/naai.mp3',
  'audio/words/maampazham.mp3',
  // External assets (CDNs)
  'https://cdn.tailwindcss.com', 
  'https://fonts.googleapis.com/css2?family=Noto+Sans+Tamil:wght@400;700&family=Poppins:wght@400;600;700&display=swap',
  // Note: Hashed JS and CSS files generated by Vite (e.g., /assets/index-XXXX.js)
  // are NOT listed here. For full PWA caching including these,
  // you'd typically use a Vite PWA plugin (e.g., vite-plugin-pwa)
  // which auto-generates the service worker with the correct hashed file names.
];

self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then((cache) => {
        console.log('Opened cache and caching assets');
        
        const localAndKnownExternalAssets = ASSETS_TO_CACHE.map(url => {
          // For local assets, ensure they are fetched fresh during SW install
          // For external, just add them (browser handles caching headers)
          return new Request(url, url.startsWith('http') ? {} : { cache: 'reload' });
        });

        return cache.addAll(localAndKnownExternalAssets).catch(error => {
          console.error('Failed to cache some assets during install:', error, error.requests);
        });
      })
      .catch(error => {
        console.error('Failed to open cache during install:', error);
      })
  );
});

self.addEventListener('activate', (event) => {
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (cacheName !== CACHE_NAME) {
            console.log('Deleting old cache:', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
  return self.clients.claim();
});

self.addEventListener('fetch', (event) => {
  // Cache-first strategy for requests
  event.respondWith(
    caches.match(event.request)
      .then((response) => {
        if (response) {
          return response; // Serve from cache
        }
        // Not in cache, fetch from network
        return fetch(event.request).then(
          (networkResponse) => {
            // Check if we received a valid response
            if (!networkResponse || networkResponse.status !== 200) {
              return networkResponse;
            }
            // For 'basic' and 'cors' types, we can cache them.
            // Opaque responses (from no-cors requests to third-party CDNs if not configured for CORS)
            // can be cached but their contents are not inspectable.
            if (networkResponse.type === 'basic' || networkResponse.type === 'cors') {
                 const responseToCache = networkResponse.clone();
                 caches.open(CACHE_NAME)
                    .then((cache) => {
                    cache.put(event.request, responseToCache);
                    });
            }
            return networkResponse;
          }
        ).catch(error => {
          console.error('Fetch failed; returning offline fallback or error for:', event.request.url, error);
          // Here you could return a fallback page if appropriate, e.g., for navigation requests
          // if (event.request.mode === 'navigate') {
          //   return caches.match('offline.html'); // You'd need an 'offline.html' in your cache
          // }
        });
      })
  );
});
